(ns shrine.home
  (:require ["package:flutter/material.dart" :as m]
            ["package:intl/intl.dart" :as i]
            [cljd.flutter :as f]
            [shrine.model.product :as p]
            [shrine.model.products-repository :as pr]
            [shrine.util :as u]))

(defn ^:private build-grid-cards-old
  [cnt]
  (for [_i (range 0 cnt)]
    (m/Card
     .clipBehavior m/Clip.antiAlias
     .child (m/Column
             .crossAxisAlignment m/CrossAxisAlignment.start
             .children [(m/AspectRatio
                         .aspectRatio (/ 18.0 11.0)
                         .child
                         (m/Image.asset "assets/diamond.png"))
                        (m/Padding
                         .padding (m/EdgeInsets.fromLTRB
                                   16.0 12.0 16.0 8.0)
                         .child
                         (m/Column
                          .crossAxisAlignment m/CrossAxisAlignment.start
                          .children [(m/Text "Title")
                                     (m/SizedBox .height 8.0)
                                     (m/Text
                                      "Secondary Text")]))]))))

(defn ^:private build-grid-cards
  [cnt]
  (for [_i (range 0 cnt)]
    (m/Card
     .clipBehavior m/Clip.antiAlias
     .child (m/Column
             .crossAxisAlignment m/CrossAxisAlignment.start
             .children [(m/AspectRatio
                         .aspectRatio (/ 18.0 11.0)
                         .child
                         (m/Image.asset "assets/diamond.png"))
                        (m/Padding
                         .padding (m/EdgeInsets.fromLTRB
                                   16.0 12.0 16.0 8.0)
                         .child
                         (m/Column
                          .crossAxisAlignment m/CrossAxisAlignment.start
                          .children [(m/Text "Title")
                                     (m/SizedBox .height 8.0)
                                     (m/Text
                                      "Secondary Text")]))]))))

;; List<Card> _buildGridCards(BuildContext context) {
;;   List<Product> products = ProductsRepository.loadProducts(Category.all);

;;   if (products.isEmpty) {
;;     return const <Card>[];
;;   }

;;   final ThemeData theme = Theme.of(context);
;;   final NumberFormat formatter = NumberFormat.simpleCurrency(
;;       locale: Localizations.localeOf(context).toString());

;;   return products.map((product) {
;;     return Card(
;;       clipBehavior: Clip.antiAlias,
;;       // TODO: Adjust card heights (103)
;;       child: Column(
;;         // TODO: Center items on the card (103)
;;         crossAxisAlignment: CrossAxisAlignment.start,
;;         children: <Widget>[
;;           AspectRatio(
;;             aspectRatio: 18 / 11,
;;             child: Image.asset(
;;               product.assetName,
;;               package: product.assetPackage,
;;              // TODO: Adjust the box size (102)
;;             ),
;;           ),
;;           Expanded(
;;             child: Padding(
;;               padding: const EdgeInsets.fromLTRB(16.0, 12.0, 16.0, 8.0),
;;               child: Column(
;;                // TODO: Align labels to the bottom and center (103)
;;                crossAxisAlignment: CrossAxisAlignment.start,
;;                 // TODO: Change innermost Column (103)
;;                 children: <Widget>[
;;                  // TODO: Handle overflowing labels (103)
;;                  Text(
;;                     product.name,
;;                     style: theme.textTheme.titleLarge,
;;                     maxLines: 1,
;;                   ),
;;                   const SizedBox(height: 8.0),
;;                   Text(
;;                     formatter.format(product.price),
;;                     style: theme.textTheme.titleSmall,
;;                   ),
;;                 ],
;;               ),
;;             ),
;;           ),
;;         ],
;;       ),
;;     );
;;   }).toList();
;; }

(defn ^m/Widget home-page
  [_ctx]
  (f/widget
   (m/Scaffold
    .appBar (m/AppBar
             .leading (m/IconButton
                       .icon (m/Icon m/Icons.menu
                                     .semanticLabel "menu")
                       .onPressed #(u/log "Menu button"))
             .actions [(m/IconButton
                        .icon (m/Icon m/Icons.search
                                      .semanticLabel "search")
                        .onPressed #(u/log "Search button"))
                       (m/IconButton
                        .icon (m/Icon m/Icons.tune
                                      .semanticLabel "filter"),
                        .onPressed #(u/log "Filter button"))]
             .title (m/Text "SHRINE"))
    .body
    (.count m/GridView
            .crossAxisCount 2
            .padding (m/EdgeInsets.all 16.0)
            .childAspectRatio (/ 8.0 9.0)
            .children (build-grid-cards 10))
    .resizeToAvoidBottomInset false)))
