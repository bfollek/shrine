(ns shrine.home
  (:require ["package:flutter/material.dart" :as m]
            ["package:intl/intl.dart" :as i]
            [cljd.flutter :as f]
            [shrine.model.product :as p]
            [shrine.model.products-repository :as pr]
            [shrine.util :as u]))

(defn ^:private build-grid-cards-old
  [cnt]
  (for [_i (range 0 cnt)]
    (m/Card
     .clipBehavior m/Clip.antiAlias
     .child (m/Column
             .crossAxisAlignment m/CrossAxisAlignment.start
             .children [(m/AspectRatio
                         .aspectRatio (/ 18.0 11.0)
                         .child
                         (m/Image.asset "assets/diamond.png"))
                        (m/Padding
                         .padding (m/EdgeInsets.fromLTRB
                                   16.0 12.0 16.0 8.0)
                         .child
                         (m/Column
                          .crossAxisAlignment m/CrossAxisAlignment.start
                          .children [(m/Text "Title")
                                     (m/SizedBox .height 8.0)
                                     (m/Text
                                      "Secondary Text")]))]))))

;;             
;;           Expanded(
;;             child: Padding(
;;               padding: const EdgeInsets.fromLTRB(16.0, 12.0, 16.0, 8.0),
;;               child: Column(
;;                // TODO: Align labels to the bottom and center (103)
;;                crossAxisAlignment: CrossAxisAlignment.start,
;;                 // TODO: Change innermost Column (103)
;;                 children: <Widget>[
;;                  // TODO: Handle overflowing labels (103)
;;                  Text(
;;                     product.name,
;;                     style: theme.textTheme.titleLarge,
;;                     maxLines: 1,
;;                   ),
;;                   const SizedBox(height: 8.0),
;;                   Text(
;;                     formatter.format(product.price),
;;                     style: theme.textTheme.titleSmall,
;;                   ),


(defn ^:private card
  [prod theme formatter]
  (m/Card
   .clipBehavior m/Clip.antiAlias
   .child (m/Column
           .crossAxisAlignment m/CrossAxisAlignment.start
           .children [(m/AspectRatio
                       .aspectRatio (/ 18.0 11.0)
                       .child
                       (m/Image.asset
                        (p/asset-name prod)
                        .package (p/asset-package prod)))
                      (m/Padding
                       .padding (m/EdgeInsets.fromLTRB
                                 16.0 12.0 16.0 8.0)
                       .child
                       (m/Column
                        .crossAxisAlignment m/CrossAxisAlignment.start
                        .children [(m/Text
                                    (:name prod)
                                    .style (-> theme .-textTheme .-titleLarge)
                                    .maxLines 1)
                                   (m/SizedBox .height 8.0)
                                   (m/Text
                                    (.format formatter (:price prod))
                                    .style (-> theme .-textTheme .-titleSmall))]))])))

(defn ^:private build-grid-cards
  [ctx]
  (let [prods (pr/load-products :all)]
    (if (seq prods)
      (let [theme (m/Theme.of ctx)
            locale (.toString (m/Localizations.localeOf ctx))
            formatter (.simpleCurrency i/NumberFormat .locale locale)
            cards (into [] (map #(card % theme formatter) prods))]
        cards)
      []))) ;; Else no products, so return an empty vector.

(defn ^m/Widget home-page
  [ctx]
  (f/widget
   (m/Scaffold
    .appBar (m/AppBar
             .leading (m/IconButton
                       .icon (m/Icon m/Icons.menu
                                     .semanticLabel "menu")
                       .onPressed #(u/log "Menu button"))
             .actions [(m/IconButton
                        .icon (m/Icon m/Icons.search
                                      .semanticLabel "search")
                        .onPressed #(u/log "Search button"))
                       (m/IconButton
                        .icon (m/Icon m/Icons.tune
                                      .semanticLabel "filter"),
                        .onPressed #(u/log "Filter button"))]
             .title (m/Text "SHRINE"))
    .body
    (.count m/GridView
            .crossAxisCount 2
            .padding (m/EdgeInsets.all 16.0)
            .childAspectRatio (/ 8.0 9.0)
            .children (build-grid-cards ctx))
    .resizeToAvoidBottomInset false)))
